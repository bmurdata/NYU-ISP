"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = True   
    mycontext['lockBwrite']=createlock();
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)
    else:
      self.Afile=openfile(self.Afn,False)
      self.Bfile=openfile(self.Bfn,False)

  def checkFile(self,bytes, offset):
    aCheck=self.Afile.readat(bytes,offset)
    bCheck=self.Bfile.readat(bytes,offset)

    # log(bCheck)
    # log(aCheck)
    if self.validData(aCheck) and self.validData(bCheck):
      # log("Good data")
      if self.validData(bCheck):
        # log("Good data good")

        self.Afile.writeat(bCheck,0)
      return True
    else:
      # log("Bad data")
      return False

  def validData(self,data):
    if data.startswith('S') and data.endswith('E'):
      return True
    else:
      return False

  def writeat(self,data,offset):
    
    

    try:
      # log("Gett lock")
      mycontext['lockBwrite'].acquire(True);
      self.Bfile.writeat(data,offset)
      mycontext['lockBwrite'].release()
    except Exception as e:
      mycontext['lockBwrite'].release();
      # log("Attemptted to write past EOF")
      pass
    # Write the requested data to the B file using the sandbox's writeat call
      
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...

    return self.Afile.readat(bytes,offset)

  def close(self):
    # log("Closing files")
    if(self.checkFile(None,0)):
      pass
      # log("was some gooodddd data")

    # log(self.readat(None,0))
    self.Afile.close()
    self.Bfile.close()


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
